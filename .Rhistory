as.character(max(dataInput()$Timestamp, na.rm = T))
})
# labelInput <- reactive({
#   Dendro_DL %>%
#     filter(Tree == input$tree) %>%
#     filter(Letter == input$letter) %>%
#     filter(DL_date >= input$daterange[1] & DL_date <= input$daterange[2])
# })
# labelInput2 <- reactive({
#   Tree_visits %>%
#     filter(Tree == input$tree) %>%
#     filter(Visit >= input$daterange[1] & Visit <= input$daterange[2])
# })
output$plot1 <- renderPlot({
p = ggplot() +
geom_line(data = dataInput(), aes(x = Timestamp, y = Radius)) +
# geom_point(data = labelInput2(), aes(x = Visit, y = LabelLoc), color = "blue",
#            size = 2) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, input$letter))
# if(input$showDL == "yes"){
#   p = p +
#     geom_label(data = labelInput(), aes(x = DL_date, y = LabelLoc, label = "DL"))}
if(input$Level == "L2" & input$show.jumps == "yes"){
p = p +
geom_point(data = dataInput(),
aes(x = Timestamp, y = jumpStart), color = "blue", size = 5)
}
p
})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run 1 ----
shinyApp(ui, server)
library(needs)
needs(tidyverse, here, lubridate, readxl)
options(readr.show_col_types = FALSE)
source("Functions_dendro.R")
# Directory paths
data.raw.dir <- here("Dendro_data_raw")
data.support.dir <- here("Dendro_data_supporting")
baseline <- read_excel(file.path(data.support.dir, "Dendro_metadata.xlsx"))
import.log <- read_csv(file.path("Dendro_data_supporting",
"Dendro_import_log.csv"),
show_col_types = F)
Log <- NULL
dendro.vec <- dendro.vec.full
for(i in dendro.vec){
# Extract the first three characters to get Tree.ID
TreeID <- str_sub(i, start = 1, end = 3)
# List files in a directory related to the current Tree.ID
filenames <- list.files(file.path(data.raw.dir, TreeID), full.names = T)
# Filter filenames to select those matching the current dendrometer
filenames <- filenames[which(str_detect(filenames, i) == T)]
if (length(filenames) == 0) {
# Log <- c(Log, cat("No files found for", i, "\n"))
cat("No files found for", i, "\n")
next  # Skip to the next DendroID
}
# Find timestamp where data starts
baseline_time <- baseline %>%
filter(Dendrometer == i) %>%
pull(Install.Datetime)
if (length(baseline_time) == 0) {
# Log <- c(Log, cat("No baseline data found for", i, "\n"))
Log <- cat("No baseline data found for", i, "\n")
next  # Skip to the next DendroID
}
# Read, process, and filter data from multiple CSV files
data.list <- lapply(filenames, read_dendro_data)
data.combined <- data.list %>%
bind_rows() %>%
filter(Timestamp > (ymd_hms(baseline_time, tz = "UTC") + days(1))) %>%
mutate(Dendrometer = i) %>%
select(Dendrometer, everything()) %>%
distinct() %>%
arrange(Timestamp)
# Fix the occasional accidental micrometer downloads
data.combined2 <- data.combined %>%
mutate(DendroUnits = ifelse(
Dendrometer == "ET2b" &
Timestamp >= as.POSIXct("2023-03-28 16:45:00", tz = "UTC") &
Timestamp <= as.POSIXct("2023-05-04 16:30:00", tz = "UTC"),
"Micrometers", DendroUnits)) %>%
mutate(DendroUnits = ifelse(
Dendrometer == "TV4a" &
Timestamp >= as.POSIXct("2023-01-10 17:45:00", tz = "UTC") &
Timestamp <= as.POSIXct("2023-02-18 01:00:00", tz = "UTC"),
"Micrometers", DendroUnits))
# Convert radius to Micrometers (always less than Tomst)
data.combined3 <- data.combined2 %>%
mutate(Radius = ifelse(DendroUnits == "Tomst",
(Dendro-1278)*(8890/(34000-1278)), Dendro)) %>%
select(Dendrometer, .id, Timestamp, Moisture, T1, T2, T3, Radius)
# Check for duplicate timestamps and remove first. Removes the last obs but thats ok. At some point would be good to check and make sure this isn't deleting extra things
data.combined4 <- data.combined3 %>%
mutate(Timelead = lead(Timestamp)) %>%
filter(Timestamp != Timelead) %>%
select(-Timelead)
# which(duplicated(d4$Time) == TRUE)
out <- str_c("Dendro_data_L1/", i, "_Dendro_L1.csv")
write_csv(data.combined4, out)
# Update import logs
import.log <- read_csv(file.path("Dendro_data_supporting",
"Dendro_import_log.csv"),
show_col_types = F)
import.log2 <- import.log %>%
mutate(Last.import = ifelse(
Dendrometer == i, max(data.combined4$Timestamp, na.rm = T),
Last.import)) %>%
mutate(Last.import = as_datetime(Last.import))
write_csv(import.log2, file.path("Dendro_data_supporting",
"Dendro_import_log.csv"))
# Log <- c(Log, cat("Processed", i, "\n"))
cat("Processed", i, "\n")
}
dendro.vec <- dendro.vec.full
for(i in dendro.vec){
filename.in.L1 <- str_c("Dendro_data_L1/", i, "_Dendro_L1.csv")
if(file.exists(filename.in.L1)){
d <- read_csv(filename.in.L1, show_col_types = F)
} else {
next
cat("No L1 file for", i, "\n")
}
d2 <- d %>%
fix_jumps(10)
write_csv(d2, file.path("Dendro_data_L2",
str_c(i, "_Dendro_L2.csv")))
}
# L1 to L2a ----------------------------------------------------------------
needs(treenetproc)
dendro.vec <- dendro.vec.full
for(i in dendro.vec){
filename.in.L1 <- str_c("Dendro_data_L1/", i, "_Dendro_L1.csv")
if(file.exists(filename.in.L1)){
d <- read_csv(filename.in.L1, show_col_types = F)
} else {
next
cat("No L1 file for", i, "\n")
}
d2 <- d %>%
select(series = Dendrometer, ts = Timestamp, value = Radius) %>%
proc_L1(reso = 15) %>%
proc_dendro_L2(tol_out = 1000, tol_jump = 10, plot_export = F, plot = F)
gro.yr.reset <- d2 %>%
filter(year(ts) == "2022") %>%
filter(ts == max(ts, na.rm = T)) %>%
pull(gro_yr)
if(length(gro.yr.reset) == 0){
gro.yr.reset = 0
}
d3 <- d2 %>%
rename(Dendrometer = series, Timestamp = ts, Radius = value) %>%
mutate(gro_yr = ifelse(Timestamp >= as_datetime("2023-01-01 00:00:00"),
gro_yr + gro.yr.reset, gro_yr))
write_csv(d3, file.path("Dendro_data_L2a",
str_c(i, "_Dendro_L2a.csv")))
}
fix_jumps <- function(x, y){
x2 = x
x3 = x2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
# The jump comes right before the indicated timestamp, so should be subtracted from all including the indicated
jumps = x3 %>%
filter(abs(Growth) > y) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
x4 = x3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(x3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(Radius.OG = Radius,
Radius = Radius - cumulativeJump) %>%
mutate(jumpStart = ifelse(jumpStart == "yes", Radius, jumpStart)) %>%
select(Dendrometer, Timestamp, Radius.OG, Radius, jumpStart)
return(x4)
}
dendro.vec <- dendro.vec.full
for(i in dendro.vec){
filename.in.L1 <- str_c("Dendro_data_L1/", i, "_Dendro_L1.csv")
if(file.exists(filename.in.L1)){
d <- read_csv(filename.in.L1, show_col_types = F)
} else {
next
cat("No L1 file for", i, "\n")
}
d2 <- d %>%
fix_jumps(10)
write_csv(d2, file.path("Dendro_data_L2",
str_c(i, "_Dendro_L2.csv")))
}
library(needs)
#needs(tidyverse, shiny, lubridate, readxl, ggpubr)
needs(tidyverse, shiny, lubridate, readxl)
import.log <- read_csv(file.path("Dendro_data_supporting",
"Dendro_import_log.csv"),
show_col_types = F)
max.date <- max(import.log$Last.import, na.rm = T)
# UI 1 ----
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
helpText("Move slider to select date range"),
helpText("Hover pointer over plot to display the exact timestamp"),
helpText("Zoom plots by clicking and dragging a square over the desired region"),
helpText("Download data to a folder on your computer"),
sliderInput("daterange",
label = h4("Select date range"),
min = ymd_hms("2022-09-01 00:00:00"),
max = max.date,
value = c(ymd_hms("2022-09-01 00:00:00"),
max.date)),
fluidRow(
column(3,
radioButtons("Level",
label = h4("Select level"),
choices = c("L1", "L2", "L2a"),
selected = "L1")),
column(3, offset = 1,
radioButtons("showDL",
label = h4("Show downloads?"),
choices = c("yes", "no"),
selected = "yes")),
column(3, offset = 1,
radioButtons("show.jumps",
label = h4("Show jumps?"),
choices = c("yes", "no"),
selected = "yes"))),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(2, offset = 1,
radioButtons("letter",
label = h4("Select Letter"),
choices = c("a", "b"),
selected = "a"))
),
downloadButton("downloadData", "Download")
),
mainPanel("Graph shows data until:",
verbatimTextOutput("maxdate.output"),
plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path(str_c("Dendro_data_", input$Level),
str_c(input$tree, input$letter, "_Dendro_",
input$Level, ".csv")), guess_max = 10000) %>%
filter(Timestamp >= input$daterange[1] & Timestamp <= input$daterange[2])
})
output$maxdate.output <- renderPrint({
as.character(max(dataInput()$Timestamp, na.rm = T))
})
# labelInput <- reactive({
#   Dendro_DL %>%
#     filter(Tree == input$tree) %>%
#     filter(Letter == input$letter) %>%
#     filter(DL_date >= input$daterange[1] & DL_date <= input$daterange[2])
# })
# labelInput2 <- reactive({
#   Tree_visits %>%
#     filter(Tree == input$tree) %>%
#     filter(Visit >= input$daterange[1] & Visit <= input$daterange[2])
# })
output$plot1 <- renderPlot({
p = ggplot() +
geom_line(data = dataInput(), aes(x = Timestamp, y = Radius)) +
# geom_point(data = labelInput2(), aes(x = Visit, y = LabelLoc), color = "blue",
#            size = 2) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, input$letter))
# if(input$showDL == "yes"){
#   p = p +
#     geom_label(data = labelInput(), aes(x = DL_date, y = LabelLoc, label = "DL"))}
if(input$Level == "L2" & input$show.jumps == "yes"){
p = p +
geom_point(data = dataInput(),
aes(x = Timestamp, y = jumpStart), color = "blue", size = 5)
}
p
})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run 1 ----
shinyApp(ui, server)
library(needs)
#needs(tidyverse, shiny, lubridate, readxl, ggpubr)
needs(tidyverse, shiny, lubridate, readxl)
import.log <- read_csv(file.path("Dendro_data_supporting",
"Dendro_import_log.csv"),
show_col_types = F)
max.date <- max(import.log$Last.import, na.rm = T)
# UI 1 ----
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
helpText("Move slider to select date range"),
helpText("Hover pointer over plot to display the exact timestamp"),
helpText("Zoom plots by clicking and dragging a square over the desired region"),
helpText("Download data to a folder on your computer"),
sliderInput("daterange",
label = h4("Select date range"),
min = ymd_hms("2022-09-01 00:00:00"),
max = max.date,
value = c(ymd_hms("2022-09-01 00:00:00"),
max.date)),
fluidRow(
column(3,
radioButtons("Level",
label = h4("Select level"),
choices = c("L1", "L2", "L2a"),
selected = "L1")),
column(3, offset = 1,
radioButtons("showDL",
label = h4("Show downloads?"),
choices = c("yes", "no"),
selected = "yes")),
column(3, offset = 1,
radioButtons("show.jumps",
label = h4("Show jumps?"),
choices = c("yes", "no"),
selected = "yes"))),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(2, offset = 1,
radioButtons("letter",
label = h4("Select Letter"),
choices = c("a", "b"),
selected = "a"))
),
downloadButton("downloadData", "Download")
),
mainPanel("Graph shows data until:",
verbatimTextOutput("maxdate.output"),
plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path(str_c("Dendro_data_", input$Level),
str_c(input$tree, input$letter, "_Dendro_",
input$Level, ".csv")), guess_max = 10000) %>%
filter(Timestamp >= input$daterange[1] & Timestamp <= input$daterange[2])
})
output$maxdate.output <- renderPrint({
as.character(max(dataInput()$Timestamp, na.rm = T))
})
# labelInput <- reactive({
#   Dendro_DL %>%
#     filter(Tree == input$tree) %>%
#     filter(Letter == input$letter) %>%
#     filter(DL_date >= input$daterange[1] & DL_date <= input$daterange[2])
# })
# labelInput2 <- reactive({
#   Tree_visits %>%
#     filter(Tree == input$tree) %>%
#     filter(Visit >= input$daterange[1] & Visit <= input$daterange[2])
# })
output$plot1 <- renderPlot({
p = ggplot() +
geom_line(data = dataInput(), aes(x = Timestamp, y = Radius)) +
# geom_point(data = labelInput2(), aes(x = Visit, y = LabelLoc), color = "blue",
#            size = 2) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, input$letter))
# if(input$showDL == "yes"){
#   p = p +
#     geom_label(data = labelInput(), aes(x = DL_date, y = LabelLoc, label = "DL"))}
if(input$Level == "L2" & input$show.jumps == "yes"){
p = p +
geom_point(data = dataInput(),
aes(x = Timestamp, y = jumpStart), color = "blue", size = 5)
}
p
})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run 1 ----
shinyApp(ui, server)
