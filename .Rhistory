pivot_longer(3:ncol(sheet), names_to = "Date", values_to = "Action") %>%
separate(Action, into = c("Action", "Junk"), sep = ";") %>%
select(-Junk)
read_sheet <- function(x){
sheet = read_excel(file.path(filepath, "SensorNotes_All.xlsx"), sheet = x) %>%
filter(Part == "a" | Part == "b") %>%
mutate(Tree = x) %>%
select(Tree, Dendro = Part, everything(), -Location)
# Warning is ok
sheet2 = sheet %>%
pivot_longer(3:ncol(sheet), names_to = "Date", values_to = "Action") %>%
separate(Action, into = c("Action", "Junk"), sep = ";") %>%
select(-Junk)
}
d <- lapply(dendro.vec.full, read_sheet) %>%
bind_rows() %>%
na.omit()
d <- lapply(tree.vec.full, read_sheet) %>%
bind_rows() %>%
na.omit()
full.tree.vec <- c("ET1", "ET2", "ET3", "ET4", "ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4", "FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4")
d <- lapply(full.tree.vec, read_sheet) %>%
bind_rows() %>%
na.omit()
d <- lapply(full.tree.vec, read_sheet)
x <- "FB1"
sheet = read_excel(file.path(filepath, "SensorNotes_All.xlsx"), sheet = x) %>%
filter(Part == "a" | Part == "b") %>%
mutate(Tree = x) %>%
select(Tree, Dendro = Part, everything(), -Location)
# Warning is ok
sheet2 = sheet %>%
pivot_longer(3:ncol(sheet), names_to = "Date", values_to = "Action") %>%
separate(Action, into = c("Action", "Junk"), sep = ";") %>%
select(-Junk)
x <- "FB2"
sheet = read_excel(file.path(filepath, "SensorNotes_All.xlsx"), sheet = x) %>%
filter(Part == "a" | Part == "b") %>%
mutate(Tree = x) %>%
select(Tree, Dendro = Part, everything(), -Location)
# Warning is ok
sheet2 = sheet %>%
pivot_longer(3:ncol(sheet), names_to = "Date", values_to = "Action") %>%
separate(Action, into = c("Action", "Junk"), sep = ";") %>%
select(-Junk)
x <- "FB3"
sheet = read_excel(file.path(filepath, "SensorNotes_All.xlsx"), sheet = x) %>%
filter(Part == "a" | Part == "b") %>%
mutate(Tree = x) %>%
select(Tree, Dendro = Part, everything(), -Location)
# Warning is ok
sheet2 = sheet %>%
pivot_longer(3:ncol(sheet), names_to = "Date", values_to = "Action") %>%
separate(Action, into = c("Action", "Junk"), sep = ";") %>%
select(-Junk)
read_sheet("FB4")
read_sheet("FB5")
# x <- "FB3"
read_sheet <- function(x){
sheet = read_excel(file.path(filepath, "SensorNotes_All.xlsx"), sheet = x) %>%
filter(Part == "a" | Part == "b") %>%
mutate(Tree = x) %>%
select(Tree, Dendro = Part, everything(), -Location)
# Warning is ok
sheet2 = sheet %>%
pivot_longer(3:ncol(sheet), names_to = "Date", values_to = "Action") %>%
separate(Action, into = c("Action", "Junk"), sep = ";") %>%
select(-Junk)
return(sheet2)
}
read_sheet("FB5")
read_sheet("FB6")
read_sheet("FB7")
read_sheet("FB8")
read_sheet("ET1")
x <- "ET1"
sheet = read_excel(file.path(filepath, "SensorNotes_All.xlsx"), sheet = x) %>%
filter(Part == "a" | Part == "b") %>%
mutate(Tree = x) %>%
select(Tree, Dendro = Part, everything(), -Location)
View(sheet)
sheet = read_excel(file.path(filepath, "SensorNotes_All.xlsx"), sheet = x) %>%
filter(Part == "a" | Part == "b") %>%
mutate(Tree = x) %>%
select(Tree, Dendro = Part, everything(), -Location)
View(sheet)
# Warning is ok
sheet2 = sheet %>%
pivot_longer(3:ncol(sheet), names_to = "Date", values_to = "Action") %>%
separate(Action, into = c("Action", "Junk"), sep = ";") %>%
select(-Junk)
read_sheet("ET1")
read_sheet <- function(x){
sheet = read_excel(file.path(filepath, "SensorNotes_All.xlsx"), sheet = x) %>%
filter(Part == "a" | Part == "b") %>%
mutate(Tree = x) %>%
select(Tree, Dendro = Part, everything(), -Location)
# Warning is ok
sheet2 = sheet %>%
pivot_longer(3:ncol(sheet), names_to = "Date", values_to = "Action") %>%
separate(Action, into = c("Action", "Junk"), sep = ";") %>%
select(-Junk)
return(sheet2)
}
d <- lapply(full.tree.vec, read_sheet) %>%
bind_rows() %>%
na.omit()
View(d)
# Warning ok- just bc most entries don't have notes
d2 <- d %>%
mutate(Date = str_sub(Date, start = 1, end = 10),
ToD = "10:00:00",
Timestamp = str_c(Date, ToD, sep = " "))
View(d2)
# Warning ok- just bc most entries don't have notes
d2 <- d %>%
mutate(Date = str_sub(Date, start = 1, end = 10),
ToD = "10:00:00",
Timestamp = str_c(Date, ToD, sep = " ")) %>%
select(Tree, Cable, Timestamp, Action) %>%
mutate(Timestamp = ymd_hms(Timestamp, tz = "UTC"))
# Warning ok- just bc most entries don't have notes
d2 <- d %>%
mutate(Date = str_sub(Date, start = 1, end = 10),
ToD = "10:00:00",
Timestamp = str_c(Date, ToD, sep = " ")) %>%
select(Tree, Dendro, Timestamp, Action) %>%
mutate(Timestamp = ymd_hms(Timestamp, tz = "UTC"))
write_csv(d2, "Dendro_data_supporting/Dendro_maintenance_actions.csv")
# devtools::install_github("treenet/treenetproc")
library(needs)
needs(tidyverse, lubridate, readxl, treenetproc)
options(readr.show_col_types = FALSE)
source("Functions_dendro.R")
# Directory paths
data.raw.dir <- file.path("Dendro_data_raw")
data.support.dir <- file.path("Dendro_data_supporting")
baseline <- read_excel(file.path(data.support.dir, "Dendro_metadata.xlsx"))
import.log <- read_csv(file.path("Dendro_data_supporting",
"Dendro_import_log.csv"),
show_col_types = F)
Log <- NULL
dendro.vec <- dendro.vec.full
# i <- "FB8b"
for(i in dendro.vec){
# Extract the first three characters to get Tree.ID
TreeID <- str_sub(i, start = 1, end = 3)
# List files in a directory related to the current Tree.ID
filenames <- list.files(file.path(data.raw.dir, TreeID), full.names = T)
# Filter filenames to select those matching the current dendrometer
filenames <- filenames[which(str_detect(filenames, i) == T)]
if (length(filenames) == 0) {
# Log <- c(Log, cat("No files found for", i, "\n"))
cat("No files found for", i, "\n")
next  # Skip to the next DendroID
}
# Find timestamp where data starts
baseline_time <- baseline %>%
filter(Dendrometer == i) %>%
pull(Install.Datetime)
if (length(baseline_time) == 0) {
# Log <- c(Log, cat("No baseline data found for", i, "\n"))
Log <- cat("No baseline data found for", i, "\n")
next  # Skip to the next DendroID
}
# Read, process, and filter data from multiple CSV files
data.list <- lapply(filenames, read_dendro_data)
data.combined <- data.list %>%
bind_rows() %>%
filter(Timestamp > (ymd_hms(baseline_time, tz = "UTC") + days(1))) %>%
mutate(Dendrometer = i) %>%
select(Dendrometer, everything()) %>%
distinct() %>%
arrange(Timestamp)
# Fix the occasional accidental micrometer downloads
data.combined2 <- data.combined %>%
mutate(DendroUnits = ifelse(
Dendrometer == "ET2b" &
Timestamp >= as.POSIXct("2023-03-28 16:45:00", tz = "UTC") &
Timestamp <= as.POSIXct("2023-05-04 16:30:00", tz = "UTC"),
"Micrometers", DendroUnits)) %>%
mutate(DendroUnits = ifelse(
Dendrometer == "TV4a" &
Timestamp >= as.POSIXct("2023-01-10 17:45:00", tz = "UTC") &
Timestamp <= as.POSIXct("2023-02-18 01:00:00", tz = "UTC"),
"Micrometers", DendroUnits))
# Convert radius to Micrometers (always less than Tomst)
data.combined3 <- data.combined2 %>%
mutate(Radius = ifelse(DendroUnits == "Tomst",
(Dendro-1278)*(8890/(34000-1278)), Dendro)) %>%
select(Dendrometer, .id, Timestamp, Moisture, T1, T2, T3, Radius)
# Check for duplicate timestamps and remove first. Removes the last obs but thats ok. At some point would be good to check and make sure this isn't deleting extra things
data.combined4 <- data.combined3 %>%
mutate(Timelead = lead(Timestamp)) %>%
filter(Timestamp != Timelead) %>%
select(-Timelead) %>%
mutate(TWD = 0)
# which(duplicated(d4$Time) == TRUE)
out <- str_c("Dendro_data_L1/", i, "_Dendro_L1.csv")
write_csv(data.combined4, out)
# Update import logs
import.log <- read_csv(file.path("Dendro_data_supporting",
"Dendro_import_log.csv"),
show_col_types = F)
import.log2 <- import.log %>%
mutate(Last.import = ifelse(
Dendrometer == i, max(data.combined4$Timestamp, na.rm = T),
Last.import)) %>%
mutate(Last.import = as_datetime(Last.import))
write_csv(import.log2, file.path("Dendro_data_supporting",
"Dendro_import_log.csv"))
# Log <- c(Log, cat("Processed", i, "\n"))
cat("Processed", i, "\n")
}
# x <- "ET6a"
find_dendro_DL <- function(x){
TreeID = str_sub(x, start = 1, end = 3)
filenames = list.files(file.path("Dendro_data_raw", TreeID), full.names = T)
filenames2 = filenames[which(str_detect(filenames, x) == T)]
d = data.frame(Dendro = x, filename = filenames2) %>%
mutate(dateloc = str_locate(filename, "202")[,"start"],
DL_date = str_sub(filename, start = dateloc, end = dateloc + 9)) %>%
select(Dendro, DL_date)
return(d)
}
Dendro_DL <- lapply(dendro.vec.full, find_dendro_DL) %>%
bind_rows() %>%
separate(Dendro, into = c("Tree", "Dendro"), 3)
write_csv(Dendro_DL, file.path("Dendro_data_supporting", "Dendro_DL.csv"))
dendro.vec <- dendro.vec.full
# i <- "ET1a"
for(i in dendro.vec){
filename.in.L1 <- str_c("Dendro_data_L1/", i, "_Dendro_L1.csv")
if(file.exists(filename.in.L1)){
d <- read_csv(filename.in.L1, show_col_types = F)
} else {
next
cat("No L1 file for", i, "\n")
}
d2 <- d %>%
select(series = Dendrometer, ts = Timestamp, value = Radius) %>%
proc_L1(reso = 15) %>%
proc_dendro_L2(tol_out = 1000, tol_jump = 10, plot_export = F, plot = F)
gro.yr.reset <- d2 %>%
group_by(Year = year(ts)) %>%
summarise(Add.to.vals = last(gro_yr)) %>%
mutate(Year = Year + 1) %>%
mutate(Add.to.vals2 = cumsum(Add.to.vals)) %>%
select(Year, Add.to.vals2)
d3 <- d2 %>%
rename(Dendrometer = series, Timestamp = ts, Radius = value) %>%
mutate(Year = year(Timestamp)) %>%
left_join(gro.yr.reset, by = "Year") %>%
replace_na(list(Add.to.vals2 = 0)) %>%
mutate(gro_yr = gro_yr + Add.to.vals2) %>%
select(Dendrometer, Timestamp, Radius, TWD = twd, Growth = gro_yr)
d4 <- d3 %>%
ungroup() %>%
mutate(Radius = Radius - first(Radius))
write_csv(d4, file.path("Dendro_data_L2",
str_c(i, "_Dendro_L2.csv")))
}
library(needs)
needs(tidyverse, shiny, lubridate, readxl)
source("app_functions_dendro.R")
options(readr.show_col_types = FALSE)
import.log <- read_csv(file.path("Dendro_data_supporting", "Dendro_import_log.csv"))
max.date <- as_date(max(import.log$Last.import, na.rm = T))
dendro.download <- read_csv(file.path("Dendro_data_supporting", "Dendro_DL_dates.csv")) %>%
mutate(DL.date = ymd_hms(str_c(DL.date, "10:00:00"), tz = "UTC")) %>%
unite(Tree, Letter, col = "Dendrometer", sep = "")
tree.visits <- read_excel(file.path("Dendro_data_supporting", "Tree_visits.xlsx")) %>%
pivot_longer(2:21, names_to = "Tree", values_to = "Timestamp")%>%
mutate(Timestamp = ymd_hms(str_c(Timestamp, "10:00:00"), tz = "UTC"))
# UI -------------------------------------
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
sliderInput("daterange",
label = h4("Select date range"),
min = as_date("2022-09-01"),
max = max.date,
value = c(as_date("2022-09-01"),
max.date)),
fluidRow(
column(3,
radioButtons("fixed.y",
label = h4("Fix y-axis?"),
choices = c("Yes", "No"),
selected = "No")),
column(9,
sliderInput("yrange",
label = h4("Select y-axis range"),
min = -200,
max = 4000,
value = c(0, 2000)))),
fluidRow(
column(3,
radioButtons("Level",
label = h4("Select level"),
choices = c("L1", "L2"),
selected = "L2")),
column(3, offset = 1,
radioButtons("show.download",
label = h4("Show downloads?"),
choices = c("yes", "no"),
selected = "no")),
column(3, offset = 1,
radioButtons("show.visit",
label = h4("Show visits?"),
choices = c("yes", "no"),
selected = "no"))),
fluidRow(
column(3,
radioButtons("tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(3, offset = 1,
fluidRow(
radioButtons("letter",
label = h4("Select Letter"),
choices = c("a", "b"),
selected = "a")),
fluidRow(
radioButtons("Time.res",
label = h4("Select time resolution"),
choices = c("15 Min", "Hourly", "Daily", "Weekly"),
selected = "15 Min")))
),
titlePanel("Download options"),
fluidRow(
column(5,
radioButtons("Time.format",
label = h4("Select time format"),
choices = c("ISO", "Excel_ready"),
selected = "ISO"))),
downloadButton(outputId = "downloadData", label = "Download")
),
mainPanel(
tabsetPanel(
type = "tabs",
tabPanel("Plot",
"Graph shows data until:",
verbatimTextOutput("max.date.out"),
plotOutput("plot1",
click = "plot_click",
brush = "plot_brush"),
verbatimTextOutput("plot_clickinfo"),
plotOutput("plot_brushedpoints"),
h4("Growth and water deficit plot:"),
plotOutput("plot_TWD")),
tabPanel("Data", tableOutput("data1"), tableOutput("data2")),
tabPanel("Summary",
h4("Variable summary stats:"),
tableOutput("summary1"),
h4("Total growth:"),
tableOutput("summary2"),
h4("Percentage of time spent in TWD:"),
tableOutput("summary3"))))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path(str_c("Dendro_data_", input$Level),
str_c(input$tree, input$letter, "_Dendro_",
input$Level, ".csv")), guess_max = 10000) %>%
filter(Timestamp >= input$daterange[1] & Timestamp <= input$daterange[2]) %>%
mutate(Tree = str_sub(Dendrometer, start = 1, end = 3)) %>%
mutate(TWD = TWD * -1)
})
dataInput2 <- reactive({
if(input$Time.res == "15 Min"){
dataInput()
} else if(input$Time.res == "Hourly"){
dataInput() %>%
group_by(Tree, Dendrometer, Timestamp = floor_date(Timestamp, "hour")) %>%
summarise(across(where(is.numeric), ~mean(., na.rm = T))) %>%
ungroup()
} else if(input$Time.res == "Daily"){
dataInput() %>%
group_by(Tree, Dendrometer, Timestamp = floor_date(Timestamp, "day")) %>%
summarise(across(where(is.numeric), ~mean(., na.rm = T))) %>%
ungroup()
} else if(input$Time.res == "Weekly"){
dataInput() %>%
group_by(Tree, Dendrometer, Timestamp = floor_date(Timestamp, "week")) %>%
summarise(across(where(is.numeric), ~mean(., na.rm = T))) %>%
ungroup()
}
})
label.DL <- reactive({
dendro.download %>%
filter(Dendrometer == str_c(input$tree, input$letter)) %>%
filter(DL.date >= input$daterange[1] & DL.date <= input$daterange[2]) %>%
left_join(dataInput(), by = c("Dendrometer", "DL.date" = "Timestamp"))
})
label.visit <- reactive({
tree.visits %>%
filter(Tree == input$tree) %>%
filter(Timestamp >= input$daterange[1] & Visit <= input$daterange[2]) %>%
left_join(dataInput(), by = c("Tree", "Timestamp"))
})
output$plot1 <- renderPlot({
p = ggplot() +
geom_line(data = dataInput2(), aes(x = Timestamp, y = Radius)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, input$letter))
if(input$show.download == "yes"){
p = p +
geom_label(data = label.DL(), aes(x = DL.date, y = Radius, label = "DL"))}
if(input$show.visit == "yes"){
p = p +
geom_point(data = label.visit(),
aes(x = Timestamp, y = Radius), color = "blue", size = 5)}
if(input$fixed.y == "Yes"){
p = p +
ylim(input$yrange[1], input$yrange[2])
}
p
})
output$max.date.out <- renderText({
as.character(max(dataInput2()$Timestamp, na.rm = T))
})
output$plot_clickinfo <- renderPrint({
val <- nearPoints(dataInput2(), input$plot_click, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput2(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$plot_TWD <- renderPlot({
ggplot(dataInput()) +
geom_line(aes(x = Timestamp, y = TWD), color = "blue") +
geom_line(aes(x = Timestamp, y = Growth), color = "green") +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24))
})
## Data and summaries ------------------------------------------------------
data.for.summaries <- reactive({
dataInput2() %>%
mutate(Timestamp = as.character(Timestamp))
})
output$summary1 <- renderTable({
summarise_dendro_vars(data.for.summaries())
})
output$summary2 <- renderTable({
summarise_growth_stats(data.for.summaries())
})
output$summary3 <- renderTable({
summarise_TWD(data.for.summaries())
})
output$data1 <- renderTable({
head(data.for.summaries())
})
output$data2 <- renderTable({
tail(data.for.summaries())
})
## Download options --------------------------------------------------------
data.for.download <- reactive({
if(input$Time.format == "Excel_ready"){
dataInput2() %>%
mutate(Timestamp = as.character(Timestamp))
} else {
dataInput2()
}
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$letter,
str_sub(as.character(input$daterange[1]), start = 1, end = 10),
str_sub(as.character(input$daterange[2]), start = 1, end = 10),
sep = "_"),
".csv")
},
content = function(file) {
write_csv(data.for.download(), file)
}
)
}
# Run ----------------------------------------------------------
shinyApp(ui, server)
