stats <- phase_stats(dendro_L2 = my_L2, plot_phase = T, plot_phase = T)
library(needs)
needs(tidyverse, here, lubridate, readxl)
jump.cutoff <- read_excel(here("Dendro_data_supporting", "Tomst_install.xlsx")) %>%
mutate(Jump.cutoff = as.numeric(Jump.cutoff))
library(needs)
needs(tidyverse, here, lubridate, readxl)
newfilenames <- list.files(file.path("Dendro_data_LVL1"), full.names = T)
newfilenames[2]
d <- read_csv("Dendro_data_LVL1/ET2a_Dendro_LVL1.csv")
View(d)
d <- read_csv("Dendro_data_LVL1/ET2a_Dendro_LVL1.csv")
x2 <- read_csv("Dendro_data_LVL1/ET2a_Dendro_LVL1.csv")
x3 = x2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
View(x3)
jumps = x3 %>%
filter(abs(Growth) > unique(jump.cut2$Jump.cutoff)) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "y") %>%
select(DendroID, date_time, Jump, cumulativeJump, jumpStart)
y <- 5
jumps = x3 %>%
filter(abs(Growth) > y) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(DendroID, date_time, Jump, cumulativeJump, jumpStart)
View(x2)
jumps = x3 %>%
filter(abs(Growth) > y) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
View(jumps)
x4 = x3 %>%
left_join(jumps, by = c("DendroID", "date_time")) %>%
mutate(cumulativeJump = ifelse(date_time == min(x3$date_time, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(DendroID, date_time, Radius, newRadius, jumpStart)
x4 = x3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(date_time == min(x3$date_time, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(DendroID, date_time, Radius, newRadius, jumpStart)
x4 = x3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp"))
x4 = x3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(x3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
View(x4)
fix_jumps <- function(x, y){
x2 = read_csv(str_c("Dendro_data_LVL2/", x, "_Dendro_LVL2.csv"),
show_col_types = F)
x3 = x2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
jumps = x3 %>%
filter(abs(Growth) > y) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
x4 = x3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(x3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
return(x4)
}
d <- read_csv("Dendro_data_LVL1/ET2a_Dendro_LVL1.csv")
d2 <- fix_jumps(DendroVec[d])
d2 <- fix_jumps(d)
d <- read_csv("Dendro_data_LVL1/ET2a_Dendro_LVL1.csv")
x2 = d
x3 = x2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
jumps = x3 %>%
filter(abs(Growth) > y) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
x4 = x3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(x3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
d2 <- fix_jumps(d)
fix_jumps <- function(y){
x2 = d
x3 = x2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
jumps = x3 %>%
filter(abs(Growth) > y) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
x4 = x3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(x3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
return(x4)
}
d2 <- fix_jumps(d)
y <- 5
library(needs)
needs(tidyverse, here, lubridate, readxl)
d <- read_csv("Dendro_data_LVL1/ET2a_Dendro_LVL1.csv")
# x <- DendroVec[3]
y <- 5
x2 = d
x3 = x2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
jumps = x3 %>%
filter(abs(Growth) > y) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
x4 = x3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(x3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
View(x4)
fix_jumps <- function(y){
x2 = d
x3 = x2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
jumps = x3 %>%
filter(abs(Growth) > y) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
x4 = x3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(x3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
return(x4)
}
d2 <- fix_jumps(d)
d2 <- fix_jumps(5)
View(d2)
d2.jumpStart <- d2 %>%
filter(jumpStart == "y")
d2.jumpStart <- d2 %>%
filter(jumpStart == "yes")
ggplot() +
geom_line(data = d2, aes(x = date_time, y = newRadius)) +
geom_line(data = d2, aes(x = date_time, y = Radius), linetype = "dashed") +
geom_point(data = d2.jumpStart, aes(x = date_time, y = newRadius), color = "blue") +
theme_bw() +
scale_x_datetime(date_breaks="1 month", date_labels="%m-%Y") +
ggtitle(unique(d2$DendroID))
ggplot() +
geom_line(data = d2, aes(x = Timestamp, y = newRadius)) +
geom_line(data = d2, aes(x = Timestamp, y = Radius), linetype = "dashed") +
geom_point(data = d2.jumpStart,
aes(x = Timestamp, y = newRadius), color = "blue") +
theme_bw() +
scale_x_datetime(date_breaks="1 month", date_labels="%m-%Y") +
ggtitle(unique(d2$Dendrometer))
# fix jumps with threshold of 5 micrometers
d2 <- fix_jumps(50)
d2.jumpStart <- d2 %>%
filter(jumpStart == "yes")
ggplot() +
geom_line(data = d2, aes(x = Timestamp, y = newRadius)) +
geom_line(data = d2, aes(x = Timestamp, y = Radius), linetype = "dashed") +
geom_point(data = d2.jumpStart,
aes(x = Timestamp, y = newRadius), color = "blue") +
theme_bw() +
scale_x_datetime(date_breaks="1 month", date_labels="%m-%Y") +
ggtitle(unique(d2$Dendrometer))
library(tidyverse)
d <- read_csv("Dendro_data_LVL1/ET2a_Dendro_LVL1.csv")
# Un-comment the line below, and you will be able to run the function line-by-line to understand it and diagnose problems
# x <- 5
fix_jumps <- function(x){
x2 = d
x3 = x2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
jumps = x3 %>%
filter(abs(Growth) > y) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
x4 = x3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(x3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
return(x4)
}
# Change threshold here- try 5 and try 50 to see the difference in the plot
d2 <- fix_jumps(50)
# Un-comment the line below, and you will be able to run the function line-by-line to understand it and diagnose problems
# x <- 5
fix_jumps <- function(x){
d2 = d
d3 = d2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
jumps = d3 %>%
filter(abs(Growth) > y) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
d4 = d3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(x3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
return(d4)
}
# Change threshold here- try 5 and try 50 to see the difference in the plot
d2 <- fix_jumps(50)
# Find where the lag exceeds the threshold
jumps = d3 %>%
filter(abs(Growth) > x) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
# Un-comment the line below, and you will be able to run the function line-by-line to understand it and diagnose problems
x <- 5
# change the name of the data (not really necessary)
d2 = d
# add a lag column so you can compare one record with the next
d3 = d2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
# Find where the lag exceeds the threshold
jumps = d3 %>%
filter(abs(Growth) > x) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
# Join the jump indicator df onto the main df, and adjust all values accordingly
d4 = d3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(x3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
# Join the jump indicator df onto the main df, and adjust all values accordingly
d4 = d3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(d3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
# Change threshold here- try 5 and try 50 to see the difference in the plot
newDat <- fix_jumps(50)
# Create df of jump locations, so they can be plotted
d2.jumpStart <- d2 %>%
filter(jumpStart == "yes")
# Create df of jump locations, so they can be plotted
newDat.jumpStart <- newDat %>%
filter(jumpStart == "yes")
# Change threshold here- try 5 and try 50 to see the difference in the plot
newDat <- fix_jumps(50)
fix_jumps <- function(x){
# change the name of the data (not really necessary)
d2 = d
# add a lag column so you can compare one record with the next
d3 = d2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
# Find where the lag exceeds the threshold
jumps = d3 %>%
filter(abs(Growth) > x) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
# Join the jump indicator df onto the main df, and adjust all values accordingly
d4 = d3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(d3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
return(d4)
}
# Change threshold here- try 5 and try 50 to see the difference in the plot
newDat <- fix_jumps(50)
# Create df of jump locations, so they can be plotted
newDat.jumpStart <- newDat %>%
filter(jumpStart == "yes")
# Plot- show original data (dashed) and new data (solid). Blue circles indicate the jumps
ggplot() +
geom_line(data = newDat, aes(x = Timestamp, y = newRadius)) +
geom_line(data = newDat, aes(x = Timestamp, y = Radius), linetype = "dashed") +
geom_point(data = newDat.jumpStart,
aes(x = Timestamp, y = newRadius), color = "blue") +
theme_bw() +
scale_x_datetime(date_breaks="1 month", date_labels="%m-%Y") +
ggtitle(unique(d2$Dendrometer))
library(tidyverse)
# Read in ET2a. You can change the filename to read different dendros
d <- read_csv("Dendro_data_LVL1/ET2a_Dendro_LVL1.csv")
# Un-comment the line below, and you will be able to run the function line-by-line to understand it and diagnose problems
# x <- 5
fix_jumps <- function(x){
# change the name of the data (not really necessary)
d2 = d
# add a lag column so you can compare one record with the next
d3 = d2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
# Find where the lag exceeds the threshold
jumps = d3 %>%
filter(abs(Growth) > x) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
# Join the jump indicator df onto the main df, and adjust all values accordingly
d4 = d3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(d3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
return(d4)
}
# Change threshold here- try 5 and try 50 to see the difference in the plot
newDat <- fix_jumps(50)
# Create df of jump locations, so they can be plotted
newDat.jumpStart <- newDat %>%
filter(jumpStart == "yes")
# This is a function that takes a single input (jump threshold), and adjusts the dataframe that you just loaded (d)
# Un-comment the line below, and you will be able to run the function line-by-line to understand it and diagnose problems
# jump.threshold <- 5
fix_jumps <- function(jump.threshold){
# change the name of the data (not really necessary)
d2 = d
# add a lag column so you can compare one record with the next
d3 = d2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
# Find where the lag exceeds the threshold
jumps = d3 %>%
filter(abs(Growth) > jump.threshold) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
# Join the jump indicator df onto the main df, and adjust all values accordingly
d4 = d3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(d3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
return(d4)
}
# This actually applies the funtion. Change threshold here- try 5 and try 50 to see the difference in the plot
newDat <- fix_jumps(50)
# Create df of jump locations, so they can be plotted
newDat.jumpStart <- newDat %>%
filter(jumpStart == "yes")
# Plot- show original data (dashed) and new data (solid). Blue circles indicate the jumps
ggplot() +
geom_line(data = newDat, aes(x = Timestamp, y = newRadius)) +
geom_line(data = newDat, aes(x = Timestamp, y = Radius), linetype = "dashed") +
geom_point(data = newDat.jumpStart,
aes(x = Timestamp, y = newRadius), color = "blue") +
theme_bw() +
scale_x_datetime(date_breaks="1 month", date_labels="%m-%Y") +
ggtitle(unique(d2$Dendrometer))
# Plot- show original data (dashed) and new data (solid). Blue circles indicate the jumps
ggplot() +
geom_line(data = newDat, aes(x = Timestamp, y = newRadius)) +
geom_line(data = newDat, aes(x = Timestamp, y = Radius), linetype = "dashed") +
geom_point(data = newDat.jumpStart,
aes(x = Timestamp, y = newRadius), color = "blue") +
theme_bw() +
scale_x_datetime(date_breaks="1 month", date_labels="%m-%Y") +
ggtitle(unique(newDat$Dendrometer))
library(tidyverse)
# Read in ET2a. You can change the filename to read different dendros
d <- read_csv("Dendro_data_LVL1/ET2a_Dendro_LVL1.csv")
# This is a function that takes a single input (jump threshold), and adjusts the dataframe that you just loaded (d)
# Un-comment the line below, and you will be able to run the function line-by-line to understand it and diagnose problems
# jump.threshold <- 5
fix_jumps <- function(jump.threshold){
# change the name of the data (not really necessary)
d2 = d
# add a lag column so you can compare one record with the next
d3 = d2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
# Find where the lag exceeds the threshold
jumps = d3 %>%
filter(abs(Growth) > jump.threshold) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
# Join the jump indicator df onto the main df, and adjust all values accordingly
d4 = d3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(d3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
return(d4)
}
# This actually applies the funtion. Change threshold here- try 5 and try 50 to see the difference in the plot
newDat <- fix_jumps(50)
# Create df of jump locations, so they can be plotted
newDat.jumpStart <- newDat %>%
filter(jumpStart == "yes")
# Plot- show original data (dashed) and new data (solid). Blue circles indicate the jumps
ggplot() +
geom_line(data = newDat, aes(x = Timestamp, y = newRadius)) +
geom_line(data = newDat, aes(x = Timestamp, y = Radius), linetype = "dashed") +
geom_point(data = newDat.jumpStart,
aes(x = Timestamp, y = newRadius), color = "blue") +
theme_bw() +
scale_x_datetime(date_breaks="1 month", date_labels="%m-%Y") +
ggtitle(unique(newDat$Dendrometer))
library(tidyverse)
# Read in ET2a. You can change the filename to read different dendros
d <- read_csv("Dendro_data_LVL1/ET2a_Dendro_LVL1.csv")
# This is a function that takes a single input (jump threshold), and adjusts the dataframe that you just loaded (d)
# Un-comment the line below, and you will be able to run the function line-by-line to understand it and diagnose problems
# jump.threshold <- 5
fix_jumps <- function(jump.threshold){
# change the name of the data (not really necessary)
d2 = d
# add a lag column so you can compare one record with the next
d3 = d2 %>%
mutate(lagRadius = lag(Radius),
Growth = Radius - lagRadius)
# Find where the lag exceeds the threshold
jumps = d3 %>%
filter(abs(Growth) > jump.threshold) %>%
rename(Jump = Growth) %>%
mutate(cumulativeJump = cumsum(Jump),
jumpStart = "yes") %>%
select(Dendrometer, Timestamp, Jump, cumulativeJump, jumpStart)
# Join the jump indicator df onto the main df, and adjust all values accordingly
d4 = d3 %>%
left_join(jumps, by = c("Dendrometer", "Timestamp")) %>%
mutate(cumulativeJump = ifelse(Timestamp == min(d3$Timestamp, na.rm = T),
0, cumulativeJump)) %>%
fill(cumulativeJump, .direction = "down") %>%
mutate(newRadius = Radius - cumulativeJump, na.rm = T) %>%
select(Dendrometer, Timestamp, Radius, newRadius, jumpStart)
return(d4)
}
# This actually applies the funtion. Change threshold here- try 5 and try 50 to see the difference in the plot
newDat <- fix_jumps(50)
# Create df of jump locations, so they can be plotted
newDat.jumpStart <- newDat %>%
filter(jumpStart == "yes")
# Plot- show original data (dashed) and new data (solid). Blue circles indicate the jumps
ggplot() +
geom_line(data = newDat, aes(x = Timestamp, y = newRadius)) +
geom_line(data = newDat, aes(x = Timestamp, y = Radius), linetype = "dashed") +
geom_point(data = newDat.jumpStart,
aes(x = Timestamp, y = newRadius), color = "blue") +
theme_bw() +
scale_x_datetime(date_breaks="1 month", date_labels="%m-%Y") +
ggtitle(unique(newDat$Dendrometer))
