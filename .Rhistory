grow_seas(d)
d <- read_csv("Dendro_data_L1/ET6a_Dendro_L1.csv") %>%
select(series = Dendrometer, ts = Timestamp, value = Radius)
# Basic processing functions
dendro_L1 <- proc_L1(data_L0 = d, reso = 15, input = "long")
dendro_L2 <- proc_dendro_L2(dendro_L1 = dendro_L1, plot = T, tol_jump = 10)
# Phase stats... pretty cool but not sure how it can be useful
# d <- read_csv(file.path("Dendro_data_L2a", "ET6a_Dendro_L2a.csv"),
#               guess_max = 10000)
test <- phase_stats(dendro_L2)
grow_seas(dendro_L2)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path("Dendro_data_L2a",
str_c(input$tree, input$letter,
"_Dendro_L2a.csv")), guess_max = 10000) %>%
filter(Timestamp >= input$daterange[1] & Timestamp <= input$daterange[2])
})
dataLabel <- reactive({
dataInput() %>%
filter(flags == "jump1")
})
output$plot1 <- renderPlot({
p <- ggplot() +
geom_line(data = dataInput(), aes(x = Timestamp, y = gro_yr)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, input$letter))
if(input$show.jumps == "yes"){
p <- p +
geom_point(data = dataLabel(), aes(x = Timestamp, y = gro_yr),
color = "blue", size = 2)
}
p
})
output$plot2 <- renderPlot({
p <- ggplot() +
geom_line(data = dataInput(), aes(x = Timestamp, y = twd)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24))
if(input$show.jumps == "yes"){
p <- p +
geom_point(data = dataLabel(), aes(x = Timestamp, y = twd),
color = "blue", size = 2)
}
p
})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
}
shinyApp(ui, server)
library(needs)
needs(tidyverse, shiny, lubridate, readxl, ggpubr)
import.log <- read_csv(file.path("Dendro_data_supporting",
"Dendro_import_log.csv"),
show_col_types = F)
max.date <- max(import.log$Last.import, na.rm = T)
# UI 1 ----
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
helpText("Move slider to select date range"),
helpText("Hover pointer over plot to display the exact timestamp"),
helpText("Zoom plots by clicking and dragging a square over the desired region"),
helpText("Download data to a folder on your computer"),
sliderInput("daterange",
label = h4("Select date range"),
min = ymd_hms("2022-09-01 00:00:00"),
max = max.date,
value = c(ymd_hms("2022-09-01 00:00:00"),
max.date)),
fluidRow(
column(3,
radioButtons("Level",
label = h4("Select level"),
choices = c("L1", "L2", "L2a"),
selected = "L1")),
column(3, offset = 1,
radioButtons("showDL",
label = h4("Show downloads?"),
choices = c("yes", "no"),
selected = "yes")),
column(3, offset = 1,
radioButtons("show.jumps",
label = h4("Show jumps?"),
choices = c("yes", "no"),
selected = "yes"))),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(2, offset = 1,
radioButtons("letter",
label = h4("Select Letter"),
choices = c("a", "b"),
selected = "a"))
),
downloadButton("downloadData", "Download")
),
mainPanel("Graph shows data until:",
verbatimTextOutput("maxdate.output"),
plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
sliderInput("daterange",
label = h4("Select date range"),
min = ymd_hms("2022-09-01 00:00:00"),
max = max.date,
value = c(ymd_hms("2022-09-01 00:00:00"),
max.date)),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(2, offset = 1,
fluidRow(
radioButtons("letter",
label = h4("Select Letter"),
choices = c("a", "b"),
selected = "a")),
fluidRow(
radioButtons("show.jumps",
label = h4("Show jumps?"),
choices = c("yes", "no"),
selected = "yes"))
)
)
),
mainPanel(plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
plotOutput("plot2"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path("Dendro_data_L2a",
str_c(input$tree, input$letter,
"_Dendro_L2a.csv")), guess_max = 10000) %>%
filter(Timestamp >= input$daterange[1] & Timestamp <= input$daterange[2])
})
dataLabel <- reactive({
dataInput() %>%
filter(flags == "jump1")
})
output$plot1 <- renderPlot({
p <- ggplot() +
geom_line(data = dataInput(), aes(x = Timestamp, y = gro_yr)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, input$letter))
if(input$show.jumps == "yes"){
p <- p +
geom_point(data = dataLabel(), aes(x = Timestamp, y = gro_yr),
color = "blue", size = 2)
}
p
})
output$plot2 <- renderPlot({
p <- ggplot() +
geom_line(data = dataInput(), aes(x = Timestamp, y = twd)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24))
if(input$show.jumps == "yes"){
p <- p +
geom_point(data = dataLabel(), aes(x = Timestamp, y = twd),
color = "blue", size = 2)
}
p
})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
}
shinyApp(ui, server)
library(needs)
needs(tidyverse, shiny, lubridate, readxl, ggpubr)
import.log <- read_csv(file.path("Dendro_data_supporting",
"Dendro_import_log.csv"),
show_col_types = F)
max.date <- max(import.log$Last.import, na.rm = T)
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
sliderInput("daterange",
label = h4("Select date range"),
min = ymd_hms("2022-09-01 00:00:00"),
max = max.date,
value = c(ymd_hms("2022-09-01 00:00:00"),
max.date)),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(2, offset = 1,
fluidRow(
radioButtons("letter",
label = h4("Select Letter"),
choices = c("a", "b"),
selected = "a")),
fluidRow(
radioButtons("show.jumps",
label = h4("Show jumps?"),
choices = c("yes", "no"),
selected = "yes"))
)
)
),
mainPanel(plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
plotOutput("plot2"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path("Dendro_data_L2a",
str_c(input$tree, input$letter,
"_Dendro_L2a.csv")), guess_max = 10000) %>%
filter(Timestamp >= input$daterange[1] & Timestamp <= input$daterange[2])
})
dataLabel <- reactive({
dataInput() %>%
filter(flags == "jump1")
})
output$plot1 <- renderPlot({
p <- ggplot() +
geom_line(data = dataInput(), aes(x = Timestamp, y = gro_yr)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, input$letter))
if(input$show.jumps == "yes"){
p <- p +
geom_point(data = dataLabel(), aes(x = Timestamp, y = gro_yr),
color = "blue", size = 2)
}
p
})
output$plot2 <- renderPlot({
p <- ggplot() +
geom_line(data = dataInput(), aes(x = Timestamp, y = twd)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24))
if(input$show.jumps == "yes"){
p <- p +
geom_point(data = dataLabel(), aes(x = Timestamp, y = twd),
color = "blue", size = 2)
}
p
})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
}
shinyApp(ui, server)
library(needs)
needs(tidyverse, shiny, lubridate, readxl)
import.log <- read_csv(file.path("Dendro_data_supporting",
"Dendro_import_log.csv"),
show_col_types = F)
max.date <- max(import.log$Last.import, na.rm = T)
library(needs)
needs(tidyverse, shiny, lubridate, readxl)
import.log <- read_csv(file.path("Dendro_data_supporting",
"Dendro_import_log.csv"),
show_col_types = F)
max.date <- max(import.log$Last.import, na.rm = T)
# UI 1 ----
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
helpText("Move slider to select date range"),
helpText("Hover pointer over plot to display the exact timestamp"),
helpText("Zoom plots by clicking and dragging a square over the desired region"),
helpText("Download data to a folder on your computer"),
sliderInput("daterange",
label = h4("Select date range"),
min = ymd_hms("2022-09-01 00:00:00"),
max = max.date,
value = c(ymd_hms("2022-09-01 00:00:00"),
max.date)),
fluidRow(
column(3,
radioButtons("Level",
label = h4("Select level"),
choices = c("L1", "L2", "L2a"),
selected = "L1")),
column(3, offset = 1,
radioButtons("showDL",
label = h4("Show downloads?"),
choices = c("yes", "no"),
selected = "yes")),
column(3, offset = 1,
radioButtons("show.jumps",
label = h4("Show jumps?"),
choices = c("yes", "no"),
selected = "yes"))),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(2, offset = 1,
radioButtons("letter",
label = h4("Select Letter"),
choices = c("a", "b"),
selected = "a"))
),
downloadButton("downloadData", "Download")
),
mainPanel("Graph shows data until:",
verbatimTextOutput("maxdate.output"),
plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
read_csv(file.path(str_c("Dendro_data_", input$Level),
str_c(input$tree, input$letter, "_Dendro_",
input$Level, ".csv")), guess_max = 10000) %>%
filter(Timestamp >= input$daterange[1] & Timestamp <= input$daterange[2])
})
output$maxdate.output <- renderPrint({
as.character(max(dataInput()$Timestamp, na.rm = T))
})
# labelInput <- reactive({
#   Dendro_DL %>%
#     filter(Tree == input$tree) %>%
#     filter(Letter == input$letter) %>%
#     filter(DL_date >= input$daterange[1] & DL_date <= input$daterange[2])
# })
# labelInput2 <- reactive({
#   Tree_visits %>%
#     filter(Tree == input$tree) %>%
#     filter(Visit >= input$daterange[1] & Visit <= input$daterange[2])
# })
output$plot1 <- renderPlot({
p = ggplot() +
geom_line(data = dataInput(), aes(x = Timestamp, y = Radius)) +
# geom_point(data = labelInput2(), aes(x = Visit, y = LabelLoc), color = "blue",
#            size = 2) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, input$letter))
# if(input$showDL == "yes"){
#   p = p +
#     geom_label(data = labelInput(), aes(x = DL_date, y = LabelLoc, label = "DL"))}
if(input$Level == "L2" & input$show.jumps == "yes"){
p = p +
geom_point(data = dataInput(),
aes(x = Timestamp, y = jumpStart), color = "blue", size = 5)
}
p
})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run 1 ----
shinyApp(ui, server)
