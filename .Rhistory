filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Timestamp >= input$daterange[1] & Timestamp <= input$daterange[2])})
output$plot1 <- renderPlot({
ggplot(dataInput()) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
}
# Run app ----
shinyApp(ui, server)
# User interface, no zoom ----
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
# helpText("View dendrometer data"),
sliderInput("daterange",
label = h4("Select date range"),
min = ymd("2022-09-01"),
max = ymd(as.character(Sys.Date())),
value = c(ymd("2022-09-01"), ymd(as.character(Sys.Date())))),
# sliderInput("window",
#             label = h4("Select window value"),
#             min = ymd("2022-09-01"),
#             max = ymd(as.character(Sys.Date())),
#             value = ymd("2022-09-01")
# ),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"TV1", "TV2", "TV3", "TV4"),
selected = "FB2")),
column(2, offset = 1,
radioButtons("dendro",
label = h4("Select Dendrometer"),
choices = c("a", "b"),
selected = "a"))
)
),
mainPanel(plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
d %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Timestamp >= input$daterange[1] & Timestamp <= input$daterange[2])})
output$plot1 <- renderPlot({
ggplot(dataInput()) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
}
# Run app ----
shinyApp(ui, server)
library(needs)
needs(tidyverse, shiny, here, lubridate)
filenames <- list.files(here("Dendro_data_LVL2"), full.names = T)
d <- lapply(filenames, read_csv, show_col_types = F) %>%
bind_rows()
# User interface, no zoom ----
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
# helpText("View dendrometer data"),
sliderInput("daterange",
label = h4("Select date range"),
min = ymd("2022-09-01"),
max = ymd(as.character(Sys.Date())),
value = c(ymd("2022-09-01"), ymd(as.character(Sys.Date())))),
# sliderInput("window",
#             label = h4("Select window value"),
#             min = ymd("2022-09-01"),
#             max = ymd(as.character(Sys.Date())),
#             value = ymd("2022-09-01")
# ),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"TV1", "TV2", "TV3", "TV4"),
selected = "FB2")),
column(2, offset = 1,
radioButtons("dendro",
label = h4("Select Dendrometer"),
choices = c("a", "b"),
selected = "a"))
)
),
mainPanel(plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
d %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Timestamp >= input$daterange[1] & Timestamp <= input$daterange[2])})
output$plot1 <- renderPlot({
ggplot(dataInput()) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
}
# Run app ----
shinyApp(ui, server)
library(needs)
needs(tidyverse, lubridate, readxl, plotly)
library(needs)
needs(tidyverse, lubridate, readxl, plotly)
DendroVec <- c(
"ET1", "ET2a", "ET2b", "ET3", "ET4a", "ET4b", "ET5",
"ET6a", "ET7", "ET8", "FB1", "FB2", "FB3a", "FB3b", "FB4a", "FB4b",
"FB5a", "FB5b", "FB6a", "FB6b", "FB7a", "FB7b", "FB8",
"TV1", "TV2", "TV3", "TV4a")
for(i in DendroVec){
Tomst.install <- read_excel("Dendro_data_supporting/Tomst_install.xlsx")
baseline <- Tomst.install %>%
filter(DendroID == i)
baseline2 <- as.POSIXct(as.character((baseline[1,4])), tz = "UTC")
d <- read_csv2(str_c("Dendro_data_LVL1/", i, "_Dendro_LVL1.csv"),
col_names = c(".id", "date_time", "Moisture", "T1", "T2", "T3",
"Tomst", "X8", "X9", "X10"),
show_col_types = F) %>%
mutate(Timestamp = ymd_hm(date_time, tz = "UTC")) %>%
select(.id, Timestamp, Moisture, T1, T2, T3, Tomst)
# Filter to start of good data
d2 <- d %>%
arrange(Timestamp) %>%
filter(Timestamp > (baseline2 + 60000))
# Check for duplicate timestamps and remove first. Removes the last obs but thats ok
d3 <- d2 %>%
mutate(Timelead = lead(Timestamp)) %>%
filter(Timestamp != Timelead)
# Assign flag if the data were downloaded in micrometers rather than raw
d4 <- d3 %>%
mutate(units = ifelse(i == "ET2b" &
Timestamp >= as.POSIXct("2023-03-28 16:45:00", tz = "UTC") &
Timestamp <= as.POSIXct("2023-05-04 16:30:00", tz = "UTC"),
"Micrometers", "Tomst")
# ,
# units = ifelse(i == "TV4a" &
#                  Timestamp >= as.POSIXct("2023-01-10 17:45:00", tz = "UTC") &
#                  Timestamp <= as.POSIXct("2023-02-18 01:00:00", tz = "UTC"),
#                "Micrometers", "Tomst")
)
# Make radius column that converts raw Tomst to micrometers. If it was downloaded in micrometers, don't do the conversion
d5 <- d4 %>%
mutate(Radius = ifelse(units == "Tomst", (Tomst-1278)*(8890/(34000-1278)),
Tomst))
# Last line gives dendrometers with no letter ID (when only 1 is in a tree and it wasn't renamed) the letter "a"
d6 <- d5 %>%
mutate(DendroID = i) %>%
separate(DendroID, into = c("Tree", "Dendro"), sep = 3) %>%
select(Tree, Dendro, .id, Timestamp, Moisture, T1, T2, T3, Radius)  %>%
mutate(Dendro = ifelse(str_length(i) == 3, "a", Dendro))
write_csv(d6, str_c("Dendro_data_LVL2/", i, "_Dendro_LVL2.csv"))
print(i)
}
library(needs)
needs(tidyverse, shiny, here, lubridate)
filenames <- list.files(here("Dendro_data_LVL2"), full.names = T)
d <- lapply(filenames, read_csv, show_col_types = F) %>%
bind_rows()
# User interface, no zoom ----
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
# helpText("View dendrometer data"),
sliderInput("daterange",
label = h4("Select date range"),
min = ymd("2022-09-01"),
max = ymd(as.character(Sys.Date())),
value = c(ymd("2022-09-01"), ymd(as.character(Sys.Date())))),
# sliderInput("window",
#             label = h4("Select window value"),
#             min = ymd("2022-09-01"),
#             max = ymd(as.character(Sys.Date())),
#             value = ymd("2022-09-01")
# ),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"TV1", "TV2", "TV3", "TV4"),
selected = "FB2")),
column(2, offset = 1,
radioButtons("dendro",
label = h4("Select Dendrometer"),
choices = c("a", "b"),
selected = "a"))
)
),
mainPanel(plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
d %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Timestamp >= input$daterange[1] & Timestamp <= input$daterange[2])})
output$plot1 <- renderPlot({
ggplot(dataInput()) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
}
# Run app ----
shinyApp(ui, server)
# User interface, no zoom ----
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
# helpText("View dendrometer data"),
sliderInput("daterange",
label = h4("Select date range"),
min = ymd("2022-09-01"),
max = ymd(as.character(Sys.Date())),
value = c(ymd("2022-09-01"), ymd(as.character(Sys.Date())))),
# sliderInput("window",
#             label = h4("Select window value"),
#             min = ymd("2022-09-01"),
#             max = ymd(as.character(Sys.Date())),
#             value = ymd("2022-09-01")
# ),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(2, offset = 1,
radioButtons("dendro",
label = h4("Select Dendrometer"),
choices = c("a", "b"),
selected = "a"))
)
),
mainPanel(plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
d %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Timestamp >= input$daterange[1] & Timestamp <= input$daterange[2])})
output$plot1 <- renderPlot({
ggplot(dataInput()) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
}
# Run app ----
shinyApp(ui, server)
library(needs)
needs(tidyverse, shiny, here, lubridate)
filenames <- list.files(here("Dendro_data_LVL2"), full.names = T)
d <- lapply(filenames, read_csv, show_col_types = F) %>%
bind_rows()
# User interface ----
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
helpText("Move slider to select date range"),
helpText("Hover pointer over plot to display the exact timestamp"),
helpText("Zoom plots by clicking and dragging a square over the desired region"),
helpText("Download data to a folder on your computer"),
sliderInput("daterange",
label = h4("Select date range"),
min = ymd("2022-09-01"),
max = ymd(as.character(Sys.Date())),
value = c(ymd("2022-09-01"), ymd(as.character(Sys.Date())))),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(2, offset = 1,
radioButtons("dendro",
label = h4("Select Dendrometer"),
choices = c("a", "b"),
selected = "a"))
),
downloadButton("downloadData", "Download")
),
mainPanel(plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
d %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Timestamp >= input$daterange[1] & Timestamp <= input$daterange[2])})
output$plot1 <- renderPlot({
ggplot(dataInput()) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Timestamp)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Timestamp, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run app ----
shinyApp(ui, server)
