output$plot1 <- renderPlot({
ggplot() +
geom_line(data = dataInput(), aes(x = Time, y = Radius)) +
geom_label(data = labelInput(), aes(x = DL_date, y = LabelLoc, label = "DL")) +
geom_point(data = labelInput2(), aes(x = Visit, y = LabelLoc), color = "blue",
size = 2) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Time)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Time, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run app ----
shinyApp(ui, server)
# User interface ----
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
helpText("Move slider to select date range"),
helpText("Hover pointer over plot to display the exact timestamp"),
helpText("Zoom plots by clicking and dragging a square over the desired region"),
helpText("Download data to a folder on your computer"),
sliderInput("daterange",
label = h4("Select date range"),
min = ymd_hms("2022-09-01 00:00:00"),
max = ymd_hms(as.character(max.date)),
value = c(ymd_hms("2022-09-01 00:00:00"), ymd_hms(as.character(max.date)))),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(2, offset = 1,
radioButtons("dendro",
label = h4("Select Dendrometer"),
choices = c("a", "b"),
selected = "a"),
radioButtons("showDL",
label = h4("Show downloads?"),
choices = c("yes", "no"),
selected = "yes"))
),
downloadButton("downloadData", "Download")
),
mainPanel("Data until:",
verbatimTextOutput("maxdate.output"),
plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
newdat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])
})
output$maxdate.output <- renderPrint({
max(dataInput()$Time)
})
labelInput <- reactive({
Dendro_DL %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(DL_date >= input$daterange[1] & DL_date <= input$daterange[2])
})
labelInput2 <- reactive({
Tree_visits %>%
filter(Tree == input$tree) %>%
filter(Visit >= input$daterange[1] & Visit <= input$daterange[2])
})
output$plot1 <- renderPlot({
ggplot() +
geom_line(data = dataInput(), aes(x = Time, y = Radius)) +
geom_label(data = labelInput(), aes(x = DL_date, y = LabelLoc, label = "DL")) +
geom_point(data = labelInput2(), aes(x = Visit, y = LabelLoc), color = "blue",
size = 2) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Time)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Time, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run app ----
shinyApp(ui, server)
library(needs)
needs(tidyverse, shiny, here, lubridate, readxl)
newfilenames <- list.files(here("Dendro_data_LVL1"), full.names = T)
newdat <- lapply(newfilenames, read_csv, show_col_types = F) %>%
bind_rows() %>%
separate(DendroID, into = c("Tree", "Dendro"), 3)
max.date <- max(newdat$Time, na.rm = T)
Dendro_DL <- read_csv(here("Dendro_data_supporting", "Dendro_DL.csv"), show_col_types = F) %>%
mutate(DL_date = ymd(DL_date, tz = "UTC")) %>%
left_join(newdat, by = c("Tree", "Dendro", "DL_date" = "Time")) %>%
select(Tree, Dendro, DL_date, LabelLoc = Radius) %>%
mutate(LabelLoc = LabelLoc - 50)
Tree_visits <- read_excel("C:/Users/vaug8/OneDrive - University of Kentucky/TMCF/Site info/Maintenance notes/Tree_visits.xlsx") %>%
mutate(Visit = ymd(Visit, tz = "UTC")) %>%
left_join(newdat, by = c("Tree", "Visit" = "Time")) %>%
select(Tree, Dendro, Visit, LabelLoc = Radius) %>%
mutate(LabelLoc = LabelLoc)
# User interface ----
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
helpText("Move slider to select date range"),
helpText("Hover pointer over plot to display the exact timestamp"),
helpText("Zoom plots by clicking and dragging a square over the desired region"),
helpText("Download data to a folder on your computer"),
sliderInput("daterange",
label = h4("Select date range"),
min = ymd_hms("2022-09-01 00:00:00"),
max = ymd_hms(as.character(max.date)),
value = c(ymd_hms("2022-09-01 00:00:00"), ymd_hms(as.character(max.date)))),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(2, offset = 1,
radioButtons("dendro",
label = h4("Select Dendrometer"),
choices = c("a", "b"),
selected = "a"),
radioButtons("showDL",
label = h4("Show downloads?"),
choices = c("yes", "no"),
selected = "yes"))
),
downloadButton("downloadData", "Download")
),
mainPanel("Data until:",
verbatimTextOutput("maxdate.output"),
plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
newdat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])
})
output$maxdate.output <- renderPrint({
max(dataInput()$Time)
})
labelInput <- reactive({
Dendro_DL %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(DL_date >= input$daterange[1] & DL_date <= input$daterange[2])
})
labelInput2 <- reactive({
Tree_visits %>%
filter(Tree == input$tree) %>%
filter(Visit >= input$daterange[1] & Visit <= input$daterange[2])
})
output$plot1 <- renderPlot({
ggplot() +
geom_line(data = dataInput(), aes(x = Time, y = Radius)) +
geom_label(data = labelInput(), aes(x = DL_date, y = LabelLoc, label = "DL")) +
geom_point(data = labelInput2(), aes(x = Visit, y = LabelLoc), color = "blue",
size = 2) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Time)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Time, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run app ----
shinyApp(ui, server)
library(needs)
needs(tidyverse, here, lubridate, readxl)
# Modify this: If a timestamp is duplicated, take the higher record number
read_dendro_data <- function(x){
read_csv2(x, show_col_types = F,
col_names = c(".id", "Time", "Moisture", "T1", "T2", "T3",
"Dendro", "X8", "X9", "X10")) %>%
mutate(Time = ymd_hm(Time, tz = "UTC"),
DendroUnits = ifelse(
str_detect(x, "um") == T, "Micrometers", "Tomst")) %>%
select(.id, Time, Moisture, T1, T2, T3, Dendro, DendroUnits)
}
# "ET5b",
DendroVec <- c(
"ET1a", "ET2a", "ET2b", "ET3a", "ET4a", "ET4b", "ET5a", "ET6a",
"ET7a", "ET8a", "FB1a", "FB2a", "FB3a", "FB3b", "FB4a", "FB4b",
"FB5a", "FB5b", "FB6a", "FB6b", "FB7a", "FB7b", "FB8a",
"TV1a", "TV2a", "TV3a", "TV4a")
i <- "FB3a"
Tree.ID = str_sub(i, start = 1, end = 3)
filenames = list.files(here("Dendro_data_import", Tree.ID), full.names = T)
filenames2 = filenames[which(str_detect(filenames, i) == T)]
# Find timestamp where data starts
baseline = read_excel(here("Dendro_data_supporting", "Tomst_install.xlsx")) %>%
filter(DendroID == i)
baseline2 = as.POSIXct(as.character((baseline[1,4])), tz = "UTC")
d = lapply(filenames2, read_dendro_data) %>%
bind_rows() %>%
filter(Time > (baseline2 + 60000)) %>%
mutate(DendroID = i) %>%
select(DendroID, everything()) %>%
distinct() %>%
arrange(Time)
# Occasionally data were accidentally downloaded by micrometer
d2 = d %>%
mutate(DendroUnits = ifelse(
DendroID == "ET2b" &
Time >= as.POSIXct("2023-03-28 16:45:00", tz = "UTC") &
Time <= as.POSIXct("2023-05-04 16:30:00", tz = "UTC"),
"Micrometers", DendroUnits)) %>%
mutate(DendroUnits = ifelse(
DendroID == "TV4a" &
Time >= as.POSIXct("2023-01-10 17:45:00", tz = "UTC") &
Time <= as.POSIXct("2023-02-18 01:00:00", tz = "UTC"),
"Micrometers", DendroUnits))
# Micrometers always less than Tomst units
d3 = d2 %>%
mutate(Radius = ifelse(DendroUnits == "Tomst",
(Dendro-1278)*(8890/(34000-1278)), Dendro)) %>%
select(DendroID, .id, Time, Moisture, T1, T2, T3, Radius)
# Check for duplicate timestamps and remove first. Removes the last obs but thats ok. At some point would be good to check and make sure this isn't deleting extra things
d4 = d3 %>%
mutate(Timelead = lead(Time)) %>%
filter(Time != Timelead) %>%
select(-Timelead)
out = str_c("Dendro_data_LVL1/", i, "_Dendro_LVL1.csv")
write_csv(d4, out)
i <- "FB3b"
Tree.ID = str_sub(i, start = 1, end = 3)
filenames = list.files(here("Dendro_data_import", Tree.ID), full.names = T)
filenames2 = filenames[which(str_detect(filenames, i) == T)]
# Find timestamp where data starts
baseline = read_excel(here("Dendro_data_supporting", "Tomst_install.xlsx")) %>%
filter(DendroID == i)
baseline2 = as.POSIXct(as.character((baseline[1,4])), tz = "UTC")
d = lapply(filenames2, read_dendro_data) %>%
bind_rows() %>%
filter(Time > (baseline2 + 60000)) %>%
mutate(DendroID = i) %>%
select(DendroID, everything()) %>%
distinct() %>%
arrange(Time)
# Occasionally data were accidentally downloaded by micrometer
d2 = d %>%
mutate(DendroUnits = ifelse(
DendroID == "ET2b" &
Time >= as.POSIXct("2023-03-28 16:45:00", tz = "UTC") &
Time <= as.POSIXct("2023-05-04 16:30:00", tz = "UTC"),
"Micrometers", DendroUnits)) %>%
mutate(DendroUnits = ifelse(
DendroID == "TV4a" &
Time >= as.POSIXct("2023-01-10 17:45:00", tz = "UTC") &
Time <= as.POSIXct("2023-02-18 01:00:00", tz = "UTC"),
"Micrometers", DendroUnits))
# Micrometers always less than Tomst units
d3 = d2 %>%
mutate(Radius = ifelse(DendroUnits == "Tomst",
(Dendro-1278)*(8890/(34000-1278)), Dendro)) %>%
select(DendroID, .id, Time, Moisture, T1, T2, T3, Radius)
# Check for duplicate timestamps and remove first. Removes the last obs but thats ok. At some point would be good to check and make sure this isn't deleting extra things
d4 = d3 %>%
mutate(Timelead = lead(Time)) %>%
filter(Time != Timelead) %>%
select(-Timelead)
out = str_c("Dendro_data_LVL1/", i, "_Dendro_LVL1.csv")
write_csv(d4, out)
newfilenames <- list.files(here("Dendro_data_LVL1"), full.names = T)
newdat <- lapply(newfilenames, read_csv, show_col_types = F) %>%
bind_rows() %>%
separate(DendroID, into = c("Tree", "Dendro"), 3)
max.date <- max(newdat$Time, na.rm = T)
Dendro_DL <- read_csv(here("Dendro_data_supporting", "Dendro_DL.csv"), show_col_types = F) %>%
mutate(DL_date = ymd(DL_date, tz = "UTC")) %>%
left_join(newdat, by = c("Tree", "Dendro", "DL_date" = "Time")) %>%
select(Tree, Dendro, DL_date, LabelLoc = Radius) %>%
mutate(LabelLoc = LabelLoc - 50)
Tree_visits <- read_excel("C:/Users/vaug8/OneDrive - University of Kentucky/TMCF/Site info/Maintenance notes/Tree_visits.xlsx") %>%
mutate(Visit = ymd(Visit, tz = "UTC")) %>%
left_join(newdat, by = c("Tree", "Visit" = "Time")) %>%
select(Tree, Dendro, Visit, LabelLoc = Radius) %>%
mutate(LabelLoc = LabelLoc)
# User interface ----
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
helpText("Move slider to select date range"),
helpText("Hover pointer over plot to display the exact timestamp"),
helpText("Zoom plots by clicking and dragging a square over the desired region"),
helpText("Download data to a folder on your computer"),
sliderInput("daterange",
label = h4("Select date range"),
min = ymd_hms("2022-09-01 00:00:00"),
max = ymd_hms(as.character(max.date)),
value = c(ymd_hms("2022-09-01 00:00:00"), ymd_hms(as.character(max.date)))),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(2, offset = 1,
radioButtons("dendro",
label = h4("Select Dendrometer"),
choices = c("a", "b"),
selected = "a"),
radioButtons("showDL",
label = h4("Show downloads?"),
choices = c("yes", "no"),
selected = "yes"))
),
downloadButton("downloadData", "Download")
),
mainPanel("Data until:",
verbatimTextOutput("maxdate.output"),
plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
newdat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])
})
output$maxdate.output <- renderPrint({
max(dataInput()$Time)
})
labelInput <- reactive({
Dendro_DL %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(DL_date >= input$daterange[1] & DL_date <= input$daterange[2])
})
labelInput2 <- reactive({
Tree_visits %>%
filter(Tree == input$tree) %>%
filter(Visit >= input$daterange[1] & Visit <= input$daterange[2])
})
output$plot1 <- renderPlot({
ggplot() +
geom_line(data = dataInput(), aes(x = Time, y = Radius)) +
geom_label(data = labelInput(), aes(x = DL_date, y = LabelLoc, label = "DL")) +
geom_point(data = labelInput2(), aes(x = Visit, y = LabelLoc), color = "blue",
size = 2) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Time)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Time, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run app ----
shinyApp(ui, server)
# Run app ----
shinyApp(ui, server)
