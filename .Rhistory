mainPanel(plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
if(input$dataset == "new"){
newdat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])
} else {
olddat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])}
})
labelInput <- reactive({
Dendro_DL %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(DL_date >= input$daterange[1] & DL_date <= input$daterange[2])
})
output$plot1 <- renderPlot({
ggplot() +
geom_line(data = dataInput(), aes(x = Time, y = Radius)) +
geom_label(data = labelInput(), aes(x = DL_date, y = Radius)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Time)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Time, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run app ----
shinyApp(ui, server)
View(Dendro_DL)
server <- function(input, output, session) {
dataInput <- reactive({
if(input$dataset == "new"){
newdat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])
} else {
olddat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])}
})
labelInput <- reactive({
Dendro_DL %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(DL_date >= input$daterange[1] & DL_date <= input$daterange[2])
})
output$plot1 <- renderPlot({
ggplot() +
geom_line(data = dataInput(), aes(x = Time, y = Radius)) +
# geom_label(data = labelInput(), aes(x = DL_date, y = Radius)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Time)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Time, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run app ----
shinyApp(ui, server)
View(olddat)
View(newdat)
olddat <- lapply(oldfilenames, read_csv, show_col_types = F) %>%
bind_rows() %>%
rename(Time = Timestamp)
View(olddat)
# User interface ----
ui <- fluidPage(
titlePanel("Dendro graphs"),
sidebarLayout(
sidebarPanel(
helpText("Move slider to select date range"),
helpText("Hover pointer over plot to display the exact timestamp"),
helpText("Zoom plots by clicking and dragging a square over the desired region"),
helpText("Download data to a folder on your computer"),
sliderInput("daterange",
label = h4("Select date range"),
min = ymd("2022-09-01"),
max = ymd(as.character(Sys.Date())),
value = c(ymd("2022-09-01"), ymd(as.character(Sys.Date())))),
fluidRow(
column(2,
radioButtons("tree",
label = h4("Select tree"),
choices = c("ET1", "ET2", "ET3", "ET4",
"ET5", "ET6", "ET7", "ET8",
"FB1", "FB2", "FB3", "FB4",
"FB5", "FB6", "FB7", "FB8",
"TV1", "TV2", "TV3", "TV4"),
selected = "ET1")),
column(2, offset = 1,
radioButtons("dataset",
label = h4("Select dataset"),
choices = c("old", "new"),
selected = "new"),
radioButtons("dendro",
label = h4("Select Dendrometer"),
choices = c("a", "b"),
selected = "a"),
radioButtons("showDL",
label = h4("Show downloads?"),
choices = c("yes", "no"),
selected = "yes"))
),
downloadButton("downloadData", "Download")
),
mainPanel(plotOutput("plot1",
hover = "plot_hover",
brush = "plot_brush"),
verbatimTextOutput("plot_hoverinfo"),
plotOutput("plot_brushedpoints"))
)
)
server <- function(input, output, session) {
dataInput <- reactive({
if(input$dataset == "new"){
newdat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])
} else {
olddat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])}
})
labelInput <- reactive({
Dendro_DL %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(DL_date >= input$daterange[1] & DL_date <= input$daterange[2])
})
output$plot1 <- renderPlot({
ggplot() +
geom_line(data = dataInput(), aes(x = Time, y = Radius)) +
# geom_label(data = labelInput(), aes(x = DL_date, y = Radius)) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Time)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Time, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run app ----
shinyApp(ui, server)
server <- function(input, output, session) {
dataInput <- reactive({
if(input$dataset == "new"){
newdat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])
} else {
olddat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])}
})
labelInput <- reactive({
Dendro_DL %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(DL_date >= input$daterange[1] & DL_date <= input$daterange[2])
})
output$plot1 <- renderPlot({
ggplot() +
geom_line(data = dataInput(), aes(x = Time, y = Radius)) +
geom_label(data = labelInput(), aes(x = DL_date, y = Radius, label = "Download")) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Time)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Time, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run app ----
shinyApp(ui, server)
Dendro_DL <- read_csv(here("Dendro_data_supporting", "Dendro_DL.csv"), show_col_types = F) %>%
mutate(DL_date = ymd(DL_date, tz = "UTC")) %>%
left_join(newdat, by = c("Tree", "Dendro", "DL_date" = "Time")) %>%
select(Tree, Dendro, DL_date, LabelLoc = Radius) %>%
mutate(LabelLoc = LabelLoc - 250)
server <- function(input, output, session) {
dataInput <- reactive({
if(input$dataset == "new"){
newdat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])
} else {
olddat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])}
})
labelInput <- reactive({
Dendro_DL %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(DL_date >= input$daterange[1] & DL_date <= input$daterange[2])
})
output$plot1 <- renderPlot({
ggplot() +
geom_line(data = dataInput(), aes(x = Time, y = Radius)) +
geom_label(data = labelInput(), aes(x = DL_date, y = Radius, label = "DL")) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Time)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Time, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run app ----
shinyApp(ui, server)
server <- function(input, output, session) {
dataInput <- reactive({
if(input$dataset == "new"){
newdat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])
} else {
olddat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])}
})
labelInput <- reactive({
Dendro_DL %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(DL_date >= input$daterange[1] & DL_date <= input$daterange[2])
})
output$plot1 <- renderPlot({
ggplot() +
geom_line(data = dataInput(), aes(x = Time, y = Radius)) +
geom_label(data = labelInput(), aes(x = DL_date, y = LabelLoc, label = "DL")) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Time)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Time, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run app ----
shinyApp(ui, server)
Dendro_DL <- read_csv(here("Dendro_data_supporting", "Dendro_DL.csv"), show_col_types = F) %>%
mutate(DL_date = ymd(DL_date, tz = "UTC")) %>%
left_join(newdat, by = c("Tree", "Dendro", "DL_date" = "Time")) %>%
select(Tree, Dendro, DL_date, LabelLoc = Radius) %>%
mutate(LabelLoc = LabelLoc - 50)
server <- function(input, output, session) {
dataInput <- reactive({
if(input$dataset == "new"){
newdat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])
} else {
olddat %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(Time >= input$daterange[1] & Time <= input$daterange[2])}
})
labelInput <- reactive({
Dendro_DL %>%
filter(Tree == input$tree) %>%
filter(Dendro == input$dendro) %>%
filter(DL_date >= input$daterange[1] & DL_date <= input$daterange[2])
})
output$plot1 <- renderPlot({
ggplot() +
geom_line(data = dataInput(), aes(x = Time, y = Radius)) +
geom_label(data = labelInput(), aes(x = DL_date, y = LabelLoc, label = "DL")) +
labs(y = "Micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 20),
axis.title.y = element_text(size = 24),
axis.text.y = element_text(size = 20),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))})
output$plot_hoverinfo <- renderPrint({
val <- nearPoints(dataInput(), input$plot_hover, maxpoints = 1)
unique(val$Time)
})
output$plot_brushedpoints <- renderPlot({
dat <- brushedPoints(dataInput(), input$plot_brush)
if (nrow(dat) == 0)
return()
ggplot(dat) +
geom_line(aes(x = Time, y = Radius)) +
labs(y = "micrometers") +
theme_bw() +
theme(axis.title.x = element_blank(),
axis.text.x = element_text(size = 18),
axis.title.y = element_text(size = 20),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 24)) +
ggtitle(str_c(input$tree, "_", input$dendro))
})
output$downloadData <- downloadHandler(
filename = function() {
str_c(str_c(input$tree, input$dendro,
input$daterange[1], input$daterange[2], sep = "_"),
".csv")
},
content = function(file) {
write_csv(dataInput(), file)
}
)
}
# Run app ----
shinyApp(ui, server)
